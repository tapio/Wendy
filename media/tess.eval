#version 400
// Shader adapted from Triangle Tessellation with OpenGL 4.0
// http://prideout.net/blog/?p=48
// Placed into the public domain by Philip Rideout

layout(triangles, equal_spacing, ccw) in;
in vec3 tcPosition[];
in vec3 tcNormal[];
in float tcCurvature[];
out vec3 tePosition;
out vec3 teNormal;
out vec3 tePatchDistance;

#define tc gl_TessCoord

// <1.0 - Less roundness when approaching zero
// ~1.0 ~ Sphere
// >1.0 - Original polygons pop out
const float exaggeration = 0.8;

void main()
{
  // Used for patch visualization
  tePatchDistance = gl_TessCoord;

  // Trivial point location
  vec3 p0 = tc.x * tcPosition[0];
  vec3 p1 = tc.y * tcPosition[1];
  vec3 p2 = tc.z * tcPosition[2];
  tePosition = p0 + p1 + p2;

  // Trivial normal
  vec3 n0 = tc.x * tcNormal[0];
  vec3 n1 = tc.y * tcNormal[1];
  vec3 n2 = tc.z * tcNormal[2];
  teNormal = normalize(n0 + n1 + n2);

  // Calculate distance to each edge
  float d0 = tc.y * tc.z;
  float d1 = tc.x * tc.z;
  float d2 = tc.x * tc.y;

  // Calculate total displacement
  float f = tcCurvature[0]*d2 + tcCurvature[1]*d0 + tcCurvature[2]*d1;

  // Displace
  tePosition += exaggeration * f * teNormal;

  // Project
  gl_Position = wyP * vec4(tePosition, 1);
}

